 K-diff Pairs in an Array
 
 Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

0 <= i < j < nums.length
|nums[i] - nums[j]| == k
Notice that |val| denotes the absolute value of val.

Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.

--------------------------------CODE-------------------------------------------------

Approach:
we have 3 condition 1)k<0 2)k=0 3)k>0
--when k<0:
we simply return
--when k=0
we search for more than one key in the hashmap

--k>0
check if num[i]-k present in hashmap 

-----------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        if(k<0) return 0;
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        int count=0;
        if(k==0)
        {
            for(auto x:mp){
                if(x.second>1){
                    count++;
                }
            }
            return count;
        }
        for(auto x:mp){
            if(mp.count(x.first-k))count++;
        }
        return count;
    }
};
