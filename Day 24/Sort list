Given the head of a linked list, return the list after sorting it in ascending order.

Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

.................................code..........................................................
TC = O(NLOGN)


class Solution {
public:
    ListNode *findMid(ListNode *head){
        ListNode *slow = head;
        ListNode *fast = head->next;
        while(fast !=NULL && fast->next!=NULL){
            slow = slow->next;
            fast=fast->next->next;
            
        }
        return slow;
        
    }
    ListNode *merge(ListNode *left , ListNode *right){
        if(left==NULL)
            return right;
        if(right==NULL)
            return left;
      ListNode *ans = new ListNode(-1);
        ListNode *temp = ans;
        while(left!=NULL && right !=NULL){
            if(left->val<right->val){
                temp->next=left;
                temp = left;
                left=left->next;
                
            }
            else{
                temp->next = right;
                temp = right;
                right=right->next;
            }
                
        }
        while(left!=NULL){
             temp->next=left;
                temp = left;
                left=left->next;
        }
        while(right!=NULL){
              temp->next = right;
                temp = right;
                right=right->next;
        }
          ans = ans->next;
          return ans;
    }
  
    ListNode* sortList(ListNode* head) {
        //Base Case
        
       if(head == NULL || head ->next == NULL)
            return head;
        
       //break linked list in two equal halves
        
      ListNode *mid = findMid(head);
      ListNode *left = head;
        ListNode *right = mid->next;
        mid->next = NULL;
        // recursive call to sort both halves
        left = sortList(left);
        right = sortList(right);
        
        //merge both left and right halves
        ListNode *result = merge(left,right);
        return result;
    }
};
