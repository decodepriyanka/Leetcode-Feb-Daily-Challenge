Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.

 Example 1:

Input: nums = [1,1,1], k = 2
Output: 2

Example 2:

Input: nums = [1,2,3], k = 3
Output: 2

APPROACH:
1) BRUTE FORCE : O(n2)

int subarraySum(vector<int>& nums, int k) {
     int n  = nums.size();
        int count=0;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=nums[j];
                if(sum==k)
                count++;
            }
        }
        return count;
        }
        
   ///////////////////////////////////////// USIGN HASHMAP///////////////////////////////////////////////////////////////
   
    int subarraySum(vector<int>& nums, int k) {
     int n  = nums.size();
        int count=0;
      
        unordered_map<int, int> prevSum;
        int sum=0;
        
        for(int i=0;i<n;i++){
            sum+=nums[i];
            
            if(sum==k)
                count++;
            
            if(prevSum.find(sum-k) != prevSum.end())
                count+=prevSum[sum-k];
            
            prevSum[sum]++;
        }
        
        return count;
        }
